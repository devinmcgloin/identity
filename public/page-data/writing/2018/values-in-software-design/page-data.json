{"componentChunkName":"component---src-templates-writing-js","path":"/writing/2018/values-in-software-design/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Values in Software Design\",\n  \"date\": \"2018-06-24\",\n  \"tags\": [\"Software\", \"Design\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I thought that the value of software comes for its reach, how much a person can\\naccomplish using it. But that may have been a poor and disheartening way to\\nview it. Poor in that it doesn't capture the true value of software and\\ndisheartening in that it forces a chase after more features and more\\ncomplexity. Well designed software isn't really about what one \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"can\"), \" accomplish\\nwhile using it, but rather about how enjoyable it is for someone to use.\"), mdx(\"p\", null, \"What we prioritise when making software has incredibly knock on effects down\\nthe chain, and therefore choosing a set of values by which decisions are made\\nis absolutely critical. Valuing objective metrics like Time on Page or other\\nproxies for engagement is a easy position to find yourself in. Like most easy\\npositions you arrive at, this one is suboptimal. What we're trying to get at\\nwith these sorts of metrics is a sense of how much a user enjoys using a\\nspecific product.\"), mdx(\"p\", null, \"The simplest way to get a sense of how much a user enjoys something is to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ask\\nthem\"), \". Feedback has the highest signal to noise ratio, more so than any other\\nmetric. The question then is how do you take that feedback and iterate? In a\\nmetrics driven approach you would A/B test solutions, and see which option\\nyields the best metrics. Facebook is known to use this approach when testing a\\nnew feature set. It's equivalent to having a hunch and throwing it up on the\\nwall to see if it sticks. Now I don't mean to say that these hunches are\\nessentially random, but that the outcome of an experiment is wholly defined by\\nwhat metrics you measure. The metrics are driving product changes instead of\\nreasoned thought.\"), mdx(\"p\", null, \"It's clear that people need to consider the total of available information, and\\ndecide which direction to go forwards. When making such choices what ought to\\nbe their north star? What framework should we use when deciding what to make,\\nhow to represent it, and how to engineer it?\"), mdx(\"p\", null, \"With the insight of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"why\"), \" a metric is behaving as it is, our view of the world\\nchanges. Sometimes this changes our core principles, other times informing our\\nexecution towards our north start, and occasionally correcting unfounded\\nassumptions. What's important is that we use the metrics to inform our view of\\nthe world, rather then letting the metrics define the boundary of our world.\"), mdx(\"p\", null, \"How does what a user experiences play into how we think about what to make and\\nhow to approach it? Fundamentally, user empathy needs to be part of your\\nguiding principles. When a companies vision of the future aligns with an\\nindividuals, a strong connection is formed as the individual actively wants the\\ncompany to exist in the world. The question of how to use metrics to inform\\ndecision making requires people to sit down and think deeply about what they\\nare trying to achieve, there is no other substitute.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Values in Software Design","date":"Sunday, June 24th 02018","tags":["Software","Design"]},"excerpt":"I thought that the value of software comes for its reach, how much a person can\naccomplish using it. But that may have been a poor andâ€¦"}},"pageContext":{"slug":"/writing/2018/values-in-software-design/"}}}