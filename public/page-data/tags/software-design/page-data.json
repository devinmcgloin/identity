{"componentChunkName":"component---src-templates-tags-js","path":"/tags/software-design","result":{"data":{"allMdx":{"totalCount":3,"edges":[{"node":{"frontmatter":{"title":"What we can learn from Unix","date":"Saturday, May 28th 02016","tags":["Software Design","Programming"]},"fields":{"slug":"/writing/2016/unix/"},"excerpt":"The Unix Philosophy is a wonderfully cohesive way to thing about program execution and composition. Its beauty relies in its simplicity, somewhat unfortunately this is also tied to the fact that Unix is dealing with software on the operating system level. We’re going to explore what the Unix Philosophy is and what it allows us to do when working in a Unix shell. All the while exploring how Unix can guide our attempts to create simpler programs at a higher level of the stack."}},{"node":{"frontmatter":{"title":"Designing for a use case","date":"Friday, January 29th 02016","tags":["Software Design","Programming"]},"fields":{"slug":"/writing/2016/designing-for-a-use-case/"},"excerpt":"When you develop an application or some software artifact you consider what task the program is to complete. You make a model of who your customers are, and how they interact with your service, and then you proceed to implement that.\n"}},{"node":{"frontmatter":{"title":"The Philosophy of vim","date":"Wednesday, July 15th 02015","tags":["Human Computer Interaction","Software Design"]},"fields":{"slug":"/writing/2015/the-philosophy-of-vim/"},"excerpt":"For those of you who have not heard of the text editor vim, it is a text editor lauded for its adaptability, and supreme extensibility. You can basically do anything you want in vim, and that’s nice, but at the same time it has the steepest learning curve for any piece of software you will encounter."}}]}},"pageContext":{"tag":"Software Design"}}}