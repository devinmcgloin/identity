{"componentChunkName":"component---src-templates-project-js","path":"/projects/air/","result":{"data":{"mdx":{"frontmatter":{"title":"AIR","date":"2016-03-23","repo":"devinmcgloin/air","license":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"project\",\n  \"title\": \"AIR\",\n  \"permalink\": \"/air/\",\n  \"date\": \"2016-03-23\",\n  \"excerpt\": \"AIR is a system for semantic representations of the world.\",\n  \"repo\": \"devinmcgloin/air\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"AIR operated under the assumption that content is key to intelligence. The\\ncentral idea of the system was to represent content in a universal manner, let\\nthat content form a web of relationships, and then parse that web for\\ninformation useful to NLP, and other tasks. Fundamentally it was our attempt to\\ngrapple with the question of representation. If you think some of these ideas\\nare interesting, get in touch! We'd love to hear from you.\"), mdx(\"h2\", null, \"Motivations\"), mdx(\"p\", null, \"The point of computing is to learn something about the world. We tell the\\nmachine some information, and build up the content it knows about. We teach it\\nwhat a clock is, what a calendar event is, or what a bicycle is. We create these\\nobjects and apply manipulations to them and store them away.\"), mdx(\"p\", null, \"It seems then, that it very well could be better if the machine already knew\\nwhat these things were. If the machines knew what it meant to add the sales from\\nthis month together, to know what it means to search for a flight, or to find a\\nused bike for sale.\"), mdx(\"p\", null, \"We think computers should know these things, and we want to allow users to work\\nwith computers as if the machine had the same intuitions and assumptions.\"), mdx(\"p\", null, \"In short, we want contextual computing.\"), mdx(\"p\", null, \"Contextual Computing means you can convey instructions in natural language, that\\nyou don\\u2019t worry about the computer being a computer, and that the technology\\nfades into the background.\"), mdx(\"h2\", null, \"Theory\"), mdx(\"p\", null, \"These are some of the general ideas behind how AIR operated.\"), mdx(\"h3\", null, \"NLP and Recursive SVO\"), mdx(\"p\", null, \"We theorized that all sentences can be broken into discrete parts that either\\nfollow Subject - Verb structure, or Subject - Verb - Object Structure. We call a\\nSV or SVO structure to be a molecule.\"), mdx(\"p\", null, \"A sentence can be reduced from \\\"The small orange cat jumped over the child's\\ntoys.\\\" to in its most simple for \\\"cat jumped toys\\\", such data would look like\\nthis:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"cat{\\n  size: small\\n  color: orange\\n  numOf: 1\\n}\\n\\njumped{\\n  prep: over\\n}\\n\\ntoys{\\n  possession: child{\\n    numOf: 1\\n  }\\n}\"))), mdx(\"p\", null, \"We call this recursive SVO as each item in the sentence can hold infinitely many\\nother SVO structures.\"), mdx(\"h3\", null, \"Output Graph\"), mdx(\"p\", null, \"The output graph is a dynamic programming environment. The graph is build for\\neach starting dataset and explored using common graph search algorithms (A\", \"*\", \" or\\nDFS). We had in mind that the graph would be goal oriented, and would explore\\nuntil a suitable outcome is found.\"), mdx(\"p\", null, \"The graph has to be generated for each time due to certain edges being\\ninvalidated for the initial dataset.\"), mdx(\"h3\", null, \"Set Operations\"), mdx(\"p\", null, \"We figure you can get a lot of logic by having a comprehensive set system, that\\ndoes basic membership tests common set operations (union, symmetric difference,\\ndifference, intersection). As well as statistical operations on those sets. With\\nsuch information you can infer answers to membership tests, if the answer is not\\nknow, as well as make inferences regarding the relationship between members of\\ntwo different sets. Most queries into AIR were going to be treated as set\\noperations.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"AIR is a system for semantic representations of the world."}},"pageContext":{"slug":"/projects/air/"}}}